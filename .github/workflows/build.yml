name: Build app

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: ["main"]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
      # The branches below must be a subset of the branches above
      branches: [ "main"]

permissions:
  contents: read
  id-token: write
  packages: write


jobs:
  Analyse-code:
    name: Analyse Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@main

      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@v4.4.1
        with:
          project-token: ${{ secrets.CODACY_API }}
          upload: true
          max-allowed-issues: 1000
  
  unit-test-py:
    name: Unit Test Python
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.11.2]

    steps:
    - name: Checkout repository
      uses: actions/checkout@main

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        cd back/
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests with coverage
      run: |
        cd back/
        pip install -r requirements_dev.txt
        pytest -Werror --junitxml=junit/test-result.xml --cov=app --cov-report=xml --cov-report=html

    - name: Report coverage to Codacy
      uses: codacy/codacy-coverage-reporter-action@v1.3.0
      with:
        project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
        coverage-reports: back/coverage.xml


  build-angular :
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          # caching node_modules
          path: web-app/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('web-app/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Install Dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        working-directory: web-app
        run: |
          npm install

      - name: Linting
        working-directory: web-app
        run: |
          npm run lint

      - name: Build angular
        working-directory: web-app
        run: |
          npm run build --prod

      - uses: actions/upload-artifact@v4
        name: cache-artifact
        with:
          name: web-app-dist
          path: web-app/dist


  build-docker-web-app :
    uses: ./.github/workflows/build-push-docker.yml
    needs: build-angular
    with:
      context: .
      dockerfile: ./docker/web/Dockerfile
      image-name: ${{ github.repository_owner }}/megacte-web
      artifact: web-app-dist
      path-artifact: web-app/dist

  build-docker-back:
    uses: ./.github/workflows/build-push-docker.yml
    needs: unit-test-py
    with:
      context: back
      dockerfile: ./docker/back/Dockerfile
      image-name: ${{ github.repository_owner }}/megacte-back